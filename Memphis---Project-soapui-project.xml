<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="60213782-92b9-48e4-87ac-7ff921c85c0d" activeEnvironment="Default" name="Memphis - Project" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Margins - Postive Tests - TestSuite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="TestCase 1"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="6fee230e-ded6-4894-bcec-66d4e1790b5f" wadlVersion="http://wadl.dev.java.net/2009/02" name="Jet2.Memphis.Api" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description xsi:nil="true"/><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://10.202.101.171</con:endpoint></con:endpoints><con:resource name="/margins" path="/margins" id="aa327a9f-7ef5-443f-bfcb-c33d6878d2d5"><con:settings/><con:parameters/><con:method name="Margin_GetMargins" id="bdcd6f2b-7b5c-45f6-9a49-c66096763797" method="POST"><con:description>
</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>text/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>text/xml</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:mar="http://10.202.101.171/margins">mar:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:mar="http://10.202.101.171/margins">mar:Fault</con:element></con:representation><con:request name="Request 1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://10.202.101.171</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="3dbcc057-d450-4bea-9442-8f1b34666d4a" name="Margins - Positive Tests - No Allocation - TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8ddf1a8b-5b7c-4d20-b6ea-145f3c417066" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Duration Days Test Case-No Allocation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="490519d3-7f4c-4161-95b1-8488dab1394e"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="cd5aa73a-a2c5-407c-b9d9-941b3fa6b12a"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-Duration Days1-No Allocation.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Duration Days1.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Duration Days1-No Allocation.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="da10eaf3-6a3d-497b-bdb9-82dc73084780"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - DurationDays1" id="23ce1d39-afef-46ff-a96c-5db247853223"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - DurationDays1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - DurationDays1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - DurationDays1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Duration Days - No Allocation"  //PATH OF FOLDER TO CREATE
	
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - DurationDays1 Row" + currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to


	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ae1803de-5fe0-4845-93f0-7244c5af7c3d" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - DurationDays1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - DurationDays1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="15c3b49f-b388-4dc4-bc72-71d4a92d6590"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="74ceecfd-7061-44f4-b5e2-1bc26dc46344"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="71253096-31e7-49ed-8d03-ea84835c7e44" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Board Type Test Case-No Allocation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="63fac990-df6a-4bd3-a5a3-c855b0ff3392"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="f35010fd-cc50-4e21-a5bb-6b22ce62bcd2"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-Board Type1.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Board Type1.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Board Type1.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="52b76c51-d42d-49ed-a1a0-2a7bc319d720"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - BoardType1" id="d386a815-2332-4502-8ef2-a2904597df25"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - BoardType1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - BoardType1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - BoardType1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)





//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Board Type"  //PATH OF FOLDER TO CREATE
	
	

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	
	def fileName = "Margin_GetMargins - Board Type1 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to
	
	

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="657d1f3f-84fd-417d-9eba-82128acbc949" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - BoardType1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - BoardType1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="76d865f9-ee0f-4607-898d-f82b123a60b6" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="942a53e4-ba9f-4140-9539-7ac7bf6329df"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="dd8efe34-ed48-4922-9c6f-eb346834becc"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="d7de6e61-ac85-461a-93f5-7af8d2ba5fc6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Star Ratings Test Case-No Allocation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="d049cabc-67e0-4d55-af52-4c7efb286b68"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="349e6408-a292-4f6a-b898-7eb8121b7ae0"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-Star Ratings1.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-Star Ratings1.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Star Ratings1.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="a1cdab7d-9ca0-44bb-a1e3-8ca44c3d7d05"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties-old" id="0096b123-8946-4fb1-89fb-aaebe3d43fa8" disabled="true"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

// Create output folders and set RootResultFolder property

//dataFolder and folderTime were created in previous step. Are they still in scope here?
//Looks like scope is local?
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath
def env = "test"
def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")


//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
RootResultFolder 	= dataFolder + "/Log Data" 		+ "\\" + env + "_Margin Tests - " + folderTime 
RootFailureFolder 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests - " + folderTime 

log.info "ROOT RESULT FOLDER = "+RootResultFolder
log.info "ROOT FAILURE FOLDER = "+RootFailureFolder
CreateResultFolder = new File(RootResultFolder)
CreateResultFolder.mkdir()
CreateFailuresFolder = new File(RootFailureFolder)
CreateFailuresFolder.mkdir()

testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)


//Original code
//def singleLineArray =DataTable[currentRow]

//testRunner.testCase.setPropertyValue('HotelID', singleLineArray[0]);

def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - StarRatings1" id="2417a9e0-e09c-44f9-930c-7bdbcca2fce7"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - StarRatings1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - StarRatings1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - StarRatings1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Star Ratings"  //PATH OF FOLDER TO CREATE
	
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - StarRatings1 Row"+currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to
	

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b41e2dbc-8686-4c07-a2d4-002cdb3c6f90" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - StarRatings1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - StarRatings1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - StarRatings1-old" id="c49ff2c3-df53-4d5d-b31c-1de867f2bfd4" disabled="true"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - StarRatings1-old" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Requst &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - StarRatings1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - StarRatings1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


//Set up the folder location and file name
def dataFolderFailure = context.getProperty("RootFailureFolder") //this is location for logging on failure. Property RootFailureFolder already set in SetProperies step
def date = new Date().format("yyyy-MM-dd'T'")
def time = new Date().format("HH-mm-ss")
//def fileName = "Margin_GetMargins Row"+currentRow+ + date + time + ".txt" 
def fileName = "Margin_GetMargins - StarRatings1 Row"+currentRow+ date + time + ".txt" 
def rootFolderFailure = dataFolderFailure +"/"+ fileName 
//def logFileSuccess = new File(rootFolderSuccess) //Use this if logging results of successful test runs. Will need to setup folder details before can use this, similar to logFileFailure
def logFileFailure = new File(rootFolderFailure)



// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.error "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="6b2d9cf8-021f-4cff-9d0a-7bd59004ab08" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="b96ec9dc-b029-45d2-9017-088593f4ca72"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="aa25dc1f-d73a-45e0-932f-cfb1442ea263"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Script Assertions" id="d606bc84-2b11-4b17-adac-84ee88e6bfd3" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def slurper = new JsonSlurper()
def response = context.expand( '${POST/Margin_GetMargins#Response}' ).toString()

def jsonRes = slurper.parseText(response)


//get response
def ID = jsonRes.ID
def Version = jsonRes.Version
def SeqId = jsonRes.Margins.SeqId
def TotalMargin = jsonRes.Margins.TotalMargin
def RoomsSeqId = jsonRes.Margins.Rooms.SeqId
def RoomsSeqI = jsonRes.Margins.Rooms.SeqId

assert flightIDRes[0].toString() == flightIdRequest 
assert bagIDRes[0][0].toString() == bagTypeIdRequest</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="234b2f82-deed-4eaf-a48d-36f563c3d78d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Provider And HotelID Test Case-No Allocation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="2fe72e4e-c947-4e3f-a78d-207bdd4e1587"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="0b0d946c-1341-438b-96c8-086abd5440bf"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-ProviderAndHotelId1.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-ProviderAndHotelId1.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-ProviderAndHotelId1.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="6b6b51d4-8e9f-4551-a41f-335b335ff038"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - Provider And HotelID 1" id="2d3f9ad8-4b26-448a-8027-9ac6cf0be405"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - Provider And HotelID 1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Provider And HotelID 1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Provider And HotelID 1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Provider And HotelID"  //PATH OF FOLDER TO CREATE
	
	log.info "FailureFolderPath = "+FailureFolderPath

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - Provider And HotelID 1 Row"+currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to


	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ce92e2d-2528-4bf8-a772-0bf418cee753" name="Script Assertion"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Provider And HotelID 1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Provider And HotelID 1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row


def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId


assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="b4092f4f-93c5-4459-ade1-5202f200d764" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="dc35e24e-21bc-475d-9db4-05807442defe"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="673836e8-06fa-471e-9496-e38bad4ce4fe"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="b2cc7b2a-a8f0-40b7-b4f6-9faa0642d4be" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Regions Test Case-No Allocation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="4bf30d2c-3da7-404a-b4d1-11dde33cde32"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="e4f5aa7b-2bac-4dab-81c2-241cdfa3ec53"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-Regions1.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-Regions1.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Regions1.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="3c95c82f-62fa-4c71-9e43-30603739d4b8"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - Regions1" id="2dd4829d-7d30-444a-8485-40afd620cd4c"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - Regions1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Regions1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Regions1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Regions"  //PATH OF FOLDER TO CREATE
	
	log.info "FailureFolderPath = "+FailureFolderPath

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - Regions1 Row"+currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to
	

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83f26b55-211a-4e64-a440-10859c3dcac3" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 

log.info "IN THE REFLECTED VALUES SCRIPT ASSERTION"


import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Regions1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Regions1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row
log.info "IN THE SCRIPT ASSERTION, current row is "+currentRow

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="6ccf6e35-4647-459c-baa1-0690d40ac557" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="b84a6366-a2cf-4243-bcb3-16947610fbcb"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="6bf1b9c8-750d-4caa-85c6-ec19cafd0382"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="12eeb487-a8df-4d38-9f42-4b0758a1834b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Num People Test Case-No Allocation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="718a505f-271f-4283-adec-e4490a66d033"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="72c985aa-a8cc-4a72-95a8-6d9b3919bd2b"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-NumPeople1-No Allocation.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data//No Allocation/Margins Test File-NumPeople1-No Allocation.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-NumPeople1-No Allocation.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="b9ebda58-2011-48b5-afaa-f60d85d812fa"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - NumPeople1" id="188a3453-d8a5-4924-a673-5f33e55438e2"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - NumPeople1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - NumPeople1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - NumPeople1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Num People"  //PATH OF FOLDER TO CREATE
	
	log.info "FailureFolderPath = "+FailureFolderPath

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - NumPeople1 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="35f7fc26-fea8-4e4e-aa71-797f998361d4" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - NumPeople1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - NumPeople1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="c44b8c83-f7ae-4a1e-ac3a-d3e320d616f2" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="80cad6d8-6004-402d-8edb-56080e9cb698"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="bdf6140b-c9a2-4d46-a4ed-7de0c51cce7c"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="e60ee6c8-4164-43a5-9c45-95820ba46000" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Total Accom Cost Test Case-No Allocation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="1a1029af-55f7-45da-971f-5acff4979ef4"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="11d70f4f-a05f-46ab-94b8-184bbb5fdcb0"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-TotalAccomCost1.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/No Allocation/Margins Test File-TotalAccomCost1.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-TotalAccomCost1.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="16fd4db5-939a-4a93-be49-b59025f5bd89"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - TotalAccomCost1" id="9b9c82c4-5442-4472-8e22-f97eb6c03c9d"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - TotalAccomCost1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - TotalAccomCost1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - TotalAccomCost1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Total Accom Cost"  //PATH OF FOLDER TO CREATE
	
	log.info "FailureFolderPath = "+FailureFolderPath

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	
	def fileName = "Margin_GetMargins - TotalAccomCost1 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to
	

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	log.error "append done, about to write to file"
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3870ffbb-fa52-40af-a576-2f8ef88208de" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - TotalAccomCost1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - TotalAccomCost1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="005156e0-1c1b-4b3b-96b2-a648c0c52a6b" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="e376ef3d-d2a7-4704-ab15-2c7f36954a28"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="7b820ea8-44c5-445e-8998-014b36041776"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>1</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>200000.99</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2018-05-01T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="6c4a3fa0-5122-4e00-8021-77b13e7ccd6b" name="Margins - Positive Tests - Allocation True False - TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="440b30e4-9a19-4210-8c34-7fc70942d0af" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Duration Days Test Case-Allocation True False" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="2bd2a5d2-dce5-4d30-87f0-af65211967ac"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="f6b6956a-9700-4862-b078-a8efbc57e815"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-Duration Days2-Alloc True False.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Duration Days2-Alloc True False.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Duration Days2-Alloc True False.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="72acfcb9-dc86-4970-871f-1d36e3efe124"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - DurationDays2" id="c8cf2f64-62b3-405d-8cd8-243d9a3152c6"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - DurationDays2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - DurationDays2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - DurationDays2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Duration Days Alloc True False"  //PATH OF FOLDER TO CREATE
	
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - DurationDays2 Row" + currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to


	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ae1803de-5fe0-4845-93f0-7244c5af7c3d" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - DurationDays2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - DurationDays2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="9152c434-fcfa-4ce5-8355-688ff694a7e8"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="1eb82833-26d9-409d-b834-49dafc3bce39"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="5f191607-6070-4861-b4ff-1159e5bc8b52" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Board Type Test Case-Allocation True False" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="2d2c5391-5003-4ce7-bf0c-11362239effa"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="abc5f250-fdb2-4338-87d9-735a2e860d06"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-Board Type2-Alloc True False.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Board Type2-Alloc True False.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Board Type2-Alloc True False.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="3bf93389-01f5-453d-aa5f-d75945643406"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - BoardType2" id="7b43f593-28a1-46d7-9460-66d01cda46d4"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - BoardType2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - BoardType2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - BoardType2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)





//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Board Type Alloc True False"  //PATH OF FOLDER TO CREATE
	
	

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	
	def fileName = "Margin_GetMargins - Board Type2 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to
	
	

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="657d1f3f-84fd-417d-9eba-82128acbc949" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - BoardType2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - BoardType2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="45c6b9b8-d82c-4613-b9ca-c7ca93369c6e" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="834b7fd8-7374-4808-bdcf-d8f33fefb6a7"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="0de8225f-b41f-4484-8898-5628a9f89591"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="fa0ade72-68c7-4235-8c3f-9246bf4ec469" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Star Ratings Test Case-Allocation True False" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="49942f86-1f45-47b4-9cfa-7e830b2c4172"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="6d7d41d1-e559-481d-bede-bfec50eba7cd"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-Star Ratings2-Alloc True False.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-Star Ratings2-Alloc True False.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Star Ratings2-Alloc True False.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="d55dbb9c-6757-4d1a-a0fa-a5d5627d9244"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties-old" id="f964b3e4-49f7-4487-b306-a0d8c9d25024" disabled="true"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

// Create output folders and set RootResultFolder property

//dataFolder and folderTime were created in previous step. Are they still in scope here?
//Looks like scope is local?
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath
def env = "test"
def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")


//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
RootResultFolder 	= dataFolder + "/Log Data" 		+ "\\" + env + "_Margin Tests - " + folderTime 
RootFailureFolder 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests - " + folderTime 

log.info "ROOT RESULT FOLDER = "+RootResultFolder
log.info "ROOT FAILURE FOLDER = "+RootFailureFolder
CreateResultFolder = new File(RootResultFolder)
CreateResultFolder.mkdir()
CreateFailuresFolder = new File(RootFailureFolder)
CreateFailuresFolder.mkdir()

testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)


//Original code
//def singleLineArray =DataTable[currentRow]

//testRunner.testCase.setPropertyValue('HotelID', singleLineArray[0]);

def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - StarRatings2" id="18e28be2-e93d-4592-84db-5df443a286de"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - StarRatings2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - StarRatings2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - StarRatings2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Star Ratings Alloc True False"  //PATH OF FOLDER TO CREATE
	
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - StarRatings2 Row"+currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to
	

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b41e2dbc-8686-4c07-a2d4-002cdb3c6f90" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - StarRatings2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - StarRatings2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - StarRatings1-old" id="ec0261de-b8f6-4619-bac6-c823987cc82e" disabled="true"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - StarRatings1-old" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Requst &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - StarRatings1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - StarRatings1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


//Set up the folder location and file name
def dataFolderFailure = context.getProperty("RootFailureFolder") //this is location for logging on failure. Property RootFailureFolder already set in SetProperies step
def date = new Date().format("yyyy-MM-dd'T'")
def time = new Date().format("HH-mm-ss")
//def fileName = "Margin_GetMargins Row"+currentRow+ + date + time + ".txt" 
def fileName = "Margin_GetMargins - StarRatings1 Row"+currentRow+ date + time + ".txt" 
def rootFolderFailure = dataFolderFailure +"/"+ fileName 
//def logFileSuccess = new File(rootFolderSuccess) //Use this if logging results of successful test runs. Will need to setup folder details before can use this, similar to logFileFailure
def logFileFailure = new File(rootFolderFailure)



// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.error "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="7493c149-bca4-419d-a2a6-dfb55ca5026a" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="ea2261e9-ec3f-4ec6-bd92-e2db797a70f9"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="ee9679b7-dd25-4498-95a3-c75d817a0d12"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="Script Assertions" id="ecd6fb77-fe7a-4ceb-8a57-7e53ee363f00" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def slurper = new JsonSlurper()
def response = context.expand( '${POST/Margin_GetMargins#Response}' ).toString()

def jsonRes = slurper.parseText(response)


//get response
def ID = jsonRes.ID
def Version = jsonRes.Version
def SeqId = jsonRes.Margins.SeqId
def TotalMargin = jsonRes.Margins.TotalMargin
def RoomsSeqId = jsonRes.Margins.Rooms.SeqId
def RoomsSeqI = jsonRes.Margins.Rooms.SeqId

assert flightIDRes[0].toString() == flightIdRequest 
assert bagIDRes[0][0].toString() == bagTypeIdRequest</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="448a0430-5170-471e-9c41-87215dd46c49" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Provider And HotelID Test Case-Allocation True False" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="c49b7840-2635-484f-87a8-d7010a839d40"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="cc5d3a42-b330-4676-b16b-b05ceb2730e7"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-ProviderAndHotelId2-Alloc True False.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-ProviderAndHotelId2-Alloc True False.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-ProviderAndHotelId2-Alloc True False.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="acd987a8-b76e-4095-8edc-66fd9f9d567e"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - Provider And HotelID2" id="94a6f961-7667-47e8-941a-d1de8569d84f"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - Provider And HotelID2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Provider And HotelID2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Provider And HotelID2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Provider And HotelID Alloc True False"  //PATH OF FOLDER TO CREATE
	
	log.info "FailureFolderPath = "+FailureFolderPath

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - Provider And HotelID 2 Row"+currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to


	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ce92e2d-2528-4bf8-a772-0bf418cee753" name="Script Assertion"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Provider And HotelID2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Provider And HotelID2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row


def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId


assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="d7033e19-d8fb-4034-acba-06cf4baad18f" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="ebb73f8b-51e6-4bdd-b4eb-f3a7684848fa"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="cb7d2ade-ee17-4b5c-b6f4-a79ba844eefe"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="d25d6c81-a139-47e6-bac3-e524a42f3e13" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Regions Test Case-Allocation True False" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="f4dcb191-3556-4ae6-b95a-ce77c089eb8a"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="5745e9f5-fc00-4ce2-9cfb-6af18b428846"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-Regions2-Alloc True False.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-Regions2-Alloc True False.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Regions2-Alloc True False.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="fe4c0cc8-0fa6-49fd-bc62-bed56e84bd24"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - Regions2" id="4885c82a-b0a2-45cb-b64a-c6d38988c249"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - Regions2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Regions2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Regions2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Regions Alloc True False"  //PATH OF FOLDER TO CREATE
	
	log.info "FailureFolderPath = "+FailureFolderPath

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - Regions2 Row"+currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to
	

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="83f26b55-211a-4e64-a440-10859c3dcac3" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 

log.info "IN THE REFLECTED VALUES SCRIPT ASSERTION"


import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Regions2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Regions2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row
log.info "IN THE SCRIPT ASSERTION, current row is "+currentRow

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="c3e519c5-9b78-4887-a1ce-287b5a663125" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="b6ac5ca7-c1cb-41d1-9558-6ef3854ab482"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="18dfda06-8877-4426-84be-083eafc29993"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="eaf02311-963b-42ef-9164-d0f42e026f38" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Num People Test Case-Allocation True False" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="61c299da-cfca-4a94-a624-0a46cf8a1258"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="e23658fe-2622-4c9b-9c82-d4ca9ef309f6"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-NumPeople2-Alloc True False.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data//Allocation True False/Margins Test File-NumPeople2-Alloc True False.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-NumPeople2-Alloc True False.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="433ef753-ac7e-4fcf-adc2-3d7d5d39972c"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - NumPeople2" id="825b216e-02ee-4cbc-9b2a-be7801c1588b"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - NumPeople2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - NumPeople2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - NumPeople2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Num People Alloc True False"  //PATH OF FOLDER TO CREATE
	
	log.info "FailureFolderPath = "+FailureFolderPath

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - NumPeople1 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="35f7fc26-fea8-4e4e-aa71-797f998361d4" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - NumPeople2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - NumPeople2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="22509255-8398-4087-9566-5d8a5df3d8cb" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="42d3273a-cc0a-43e1-b569-4cc47fb7b3b9"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="4d29e443-6aca-48e6-a895-5c61c0ccc914"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="edb462e2-be68-43e6-b38e-1c6593403ee8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Total Accom Cost Test Case-Allocation True False" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="7c848a03-8455-4e54-b8c7-4818a86877ec"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="31fb5c5c-599f-4bbf-ad68-2a91e7564476"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation True False/Margins Test File-TotalAccomCost2-Alloc True False.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/AllocationTrue False/Margins Test File-TotalAccomCost2-Alloc True False.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-TotalAccomCost2-Alloc True False.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="3183b3e5-18c8-4912-9d92-73d4bf4a445a"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - TotalAccomCost2" id="8a916448-f73d-422d-8210-e9e566e51220"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - TotalAccomCost2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - TotalAccomCost2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - TotalAccomCost2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Total Accom Cost Alloc True False"  //PATH OF FOLDER TO CREATE
	
	log.info "FailureFolderPath = "+FailureFolderPath

	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	
	def fileName = "Margin_GetMargins - TotalAccomCost1 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to
	

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	log.error "append done, about to write to file"
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3870ffbb-fa52-40af-a576-2f8ef88208de" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - TotalAccomCost2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - TotalAccomCost2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="19f830a4-892e-4362-9faa-0224b7e0e798" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="ab39c797-5daa-4ce2-bfe7-8310d1ab3c8e"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="68cca4f6-a6c7-412a-8c3b-937c80e3b1f0"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>1</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>200000.99</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2018-05-01T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="e8e81f7c-3f7a-4123-9c14-c8c92b1c0e51" name="Margins - Positive Tests - Allocation False True - TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="c83a3e12-75a2-4d1d-be54-4a6cb166d9c2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Duration Days Test Case-Allocation False True" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="6b7b4cb1-17e9-4129-82b6-0ba399a65680"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="2c4a1131-ddfb-4679-92c2-6db42a3d54cb"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation False True/Margins Test File-Duration Days3-Alloc False True.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Duration Days3-Alloc False True.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Duration Days3-Alloc False True.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="b7453ddb-db1f-47bb-b565-2e88d404514d"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - DurationDays3" id="136cbf0d-a60a-40f4-a8e6-6da7a752e248"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - DurationDays3" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - DurationDays3#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - DurationDays3#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Duration Days Alloc False True"  //PATH OF FOLDER TO CREATE
	
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - DurationDays3 Row" + currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to


	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ae1803de-5fe0-4845-93f0-7244c5af7c3d" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - DurationDays3#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - DurationDays3#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="46fe32ed-b3c4-4af0-83b8-77d65176b04d"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="83bc5911-27b6-4a12-8092-bca6cf2c6792"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="a6cd682a-9a47-4e15-ba02-01f13ee42f1a" name="Margins - Positive Tests - Full Allocation  - TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="35fa4072-0e84-44d9-8002-ee28ae221ae6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Duration Days Test Case-Allocation False True" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="16c0ecfd-5758-40c2-89e6-bf031f42a7eb"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="6cf3adee-5d73-451d-b03a-bbe51e4da4e1"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Allocation True True/Margins Test File-Duration Days4-Alloc True True.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Duration Days4-Alloc True True.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Duration Days4-Alloc True True.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="ff6af629-06c8-469d-8055-7ac26bb7a072"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - DurationDays4" id="3198ab25-d5d8-4d7e-b40d-bcbd4bd836ef"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - DurationDays4" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - DurationDays4#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - DurationDays4#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

//get value of fields in response
//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
def totalMarginRes = jsonResponse.Margins[0].TotalMargin


// Now create and record the result file
//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
if ( totalMarginRes &lt;= 0 ) //This is the condition for writing to log file
{
	//Set up variables used in naming logging folder 
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
	def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
	def env = "test"
	def folderDate = new Date() //Needed to set the time in next line
	def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")


	//Setting up locations for logging
	//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Duration Days Alloc True True"  //PATH OF FOLDER TO CREATE
	
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Set up variables used in naming logging file
	def date = new Date().format("yyyy-MM-dd'T'") 
	def time = new Date().format("HH-mm-ss")
	
	def fileName = "Margin_GetMargins - DurationDays4 Row" + currentRow+ " " + date + time + ".txt"  //NAME OF FILE TO CREATE
	def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO
	
	def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to


	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	testResult.append "\r\nTotal Margin= "	+totalMarginRes
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "totalMarginRes &lt;= 0"
	log.info "The location fo the failure folder is: " + logFileFailure
}
else
{
	log.info "no error found"
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ae1803de-5fe0-4845-93f0-7244c5af7c3d" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - DurationDays4#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - DurationDays4#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="240d0615-5ae7-44fc-a366-4f68213d57d1"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="894752b0-3f1e-4ac1-a20b-d4f0a573d222"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="0d41b389-9aca-4b55-b149-e37fd466f701" name="Margins - Positive Tests - Multiple Margins - Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e547ac23-efda-46df-a6f6-7f149c662570" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Multiple Margins, 1 Room per Margin Test Case" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="18ca4f7b-26d4-457d-82c9-9fbd597f3705"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="3e266e7d-c066-41d9-943c-9edee1289a29"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Margins Test File - Multiples 2Margins 1Room Each.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File - Multiples 2Margins 1Room Each.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File - Multiples 2Margins 1Room Each.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="049d39d2-93c8-4ccd-ad6c-91e750bc54fc"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 
def singleLineArray =DataTable[currentRow]

//Only 1 set of these details required for request
testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])

//First Margain
testRunner.testCase.setPropertyValue('SeqId1',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId1',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation1',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId1',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation1',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId1',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId1',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating1',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId1',singleLineArray[11])
////First Room of First Margin
testRunner.testCase.setPropertyValue('RoomsSeqId1',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId1',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode1',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults1',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren1',singleLineArray[16])
//Other details of First Margin
testRunner.testCase.setPropertyValue('DepartureDate1',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays1',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId1',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost1',singleLineArray[20])
//
//Second Margin
testRunner.testCase.setPropertyValue('SeqId2',singleLineArray[21])
testRunner.testCase.setPropertyValue('OutboundFlightId2',singleLineArray[22])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation2',singleLineArray[23])
testRunner.testCase.setPropertyValue('InboundFlightId2',singleLineArray[24])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation2',singleLineArray[25])
testRunner.testCase.setPropertyValue('ProviderId2',singleLineArray[26])
testRunner.testCase.setPropertyValue('ProviderHotelId2',singleLineArray[27])
testRunner.testCase.setPropertyValue('HotelStarRating2',singleLineArray[28])
testRunner.testCase.setPropertyValue('RegionId2',singleLineArray[29])
//
////First Room of Second Margin
testRunner.testCase.setPropertyValue('RoomsSeqId2',singleLineArray[30])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId2',singleLineArray[31])
testRunner.testCase.setPropertyValue('BoardTypeCode2',singleLineArray[32])
testRunner.testCase.setPropertyValue('NumAdults2',singleLineArray[33])
testRunner.testCase.setPropertyValue('NumChildren2',singleLineArray[34])
//Other details of Second Margin
testRunner.testCase.setPropertyValue('DepartureDate2',singleLineArray[35])
testRunner.testCase.setPropertyValue('DurationDays2',singleLineArray[36])
testRunner.testCase.setPropertyValue('ChannelId2',singleLineArray[37])
testRunner.testCase.setPropertyValue('TotalAccommodationCost2',singleLineArray[38])
//Only 1 set of these details required for request
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[39])

//Show what we put into request-don't really need this, can check script log instead

//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - Multiples1" id="a2f67c7c-e337-47ef-bb66-6ddb9ffb7380"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - Multiples1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId1}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId1}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation1}",
      "InboundFlightId": "${#TestCase#InboundFlightId1}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation1}",
      "ProviderId": "${#TestCase#ProviderId1}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId1}",
      "HotelStarRating": "${#TestCase#HotelStarRating1}",
      "RegionId": "${#TestCase#RegionId1}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId1}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId1}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode1}",
          "NumAdults": "${#TestCase#NumAdults1}",
          "NumChildren": "${#TestCase#NumChildren1}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate1}",
      "DurationDays": "${#TestCase#DurationDays1}",
      "ChannelId": "${#TestCase#ChannelId1}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost1}"
    },
    {
      "SeqId": "${#TestCase#SeqId2}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId2}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation2}",
      "InboundFlightId": "${#TestCase#InboundFlightId2}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation2}",
      "ProviderId": 		"${#TestCase#ProviderId2}",
      "ProviderHotelId": 	"${#TestCase#ProviderHotelId2}",
      "HotelStarRating": "${#TestCase#HotelStarRating2}",
      "RegionId": "${#TestCase#RegionId2}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId2}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId2}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode2}",
          "NumAdults": "${#TestCase#NumAdults2}",
          "NumChildren": "${#TestCase#NumChildren2}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate2}",
      "DurationDays": "${#TestCase#DurationDays2}",
      "ChannelId": "${#TestCase#ChannelId2}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost2}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Multiples1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Multiples1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests  Multiple Margins and Rooms"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "{Margin_GetMargins - Multiples Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{
log.info "Not null"

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{	
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"	
	log.info "The location fo the failure folder is: " + logFileFailure
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e7c127b2-e93c-4df1-95f6-7e59ea6aa930" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Multiples1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Multiples1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="46d4fbec-e2a9-4f9e-8783-6ae6d880de04" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="028cef18-a238-4864-997e-bb76b5bd0418"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="62101a5f-9eae-482b-9c87-555f9788c428"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property><con:property><con:name>SeqId1</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId1</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation1</con:name><con:value/></con:property><con:property><con:name>InboundFlightId1</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation1</con:name><con:value/></con:property><con:property><con:name>ProviderId1</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId1</con:name><con:value/></con:property><con:property><con:name>HotelStarRating1</con:name><con:value/></con:property><con:property><con:name>RegionId1</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId1</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId1</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode1</con:name><con:value/></con:property><con:property><con:name>NumAdults1</con:name><con:value/></con:property><con:property><con:name>NumChildren1</con:name><con:value/></con:property><con:property><con:name>DepartureDate1</con:name><con:value/></con:property><con:property><con:name>DurationDays1</con:name><con:value/></con:property><con:property><con:name>ChannelId1</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost1</con:name><con:value/></con:property><con:property><con:name>SeqId2</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId2</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation2</con:name><con:value/></con:property><con:property><con:name>InboundFlightId2</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation2</con:name><con:value/></con:property><con:property><con:name>ProviderId2</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId2</con:name><con:value/></con:property><con:property><con:name>HotelStarRating2</con:name><con:value/></con:property><con:property><con:name>RegionId2</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId2</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId2</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode2</con:name><con:value/></con:property><con:property><con:name>NumAdults2</con:name><con:value/></con:property><con:property><con:name>NumChildren2</con:name><con:value/></con:property><con:property><con:name>DepartureDate2</con:name><con:value/></con:property><con:property><con:name>DurationDays2</con:name><con:value/></con:property><con:property><con:name>ChannelId2</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost2</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="ed076ba3-00ca-4086-80f7-4eb5f3f008f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Multiple Margins, 2 Rooms  Per MarginTest Case" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="defd4690-af12-4f84-95bf-d7627f17c719"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="682898b5-74ce-44d0-acbf-f65bf5bc4eac"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Margins Test File - Multiples 2Margins 2Room Each.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File - Multiples 2Margins 2Room Each.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File - Multiples 2Margins 2Room Each.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="b4dd3b4d-5ef0-4267-a275-2469d3b0f081"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 
def singleLineArray =DataTable[currentRow]

//Only 1 set of these details required for request
testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])

//First Margain
testRunner.testCase.setPropertyValue('SeqId1',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId1',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation1',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId1',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation1',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId1',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId1',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating1',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId1',singleLineArray[11])
////First Room of First Margin
testRunner.testCase.setPropertyValue('RoomsSeqId1A',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId1A',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode1A',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults1A',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren1A',singleLineArray[16])
////Second Room of First Margin
testRunner.testCase.setPropertyValue('RoomsSeqId1B',singleLineArray[17])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId1B',singleLineArray[17])
testRunner.testCase.setPropertyValue('BoardTypeCode1B',singleLineArray[19])
testRunner.testCase.setPropertyValue('NumAdults1B',singleLineArray[20])
testRunner.testCase.setPropertyValue('NumChildren1B',singleLineArray[21])
//Other details of First Margin
testRunner.testCase.setPropertyValue('DepartureDate1',singleLineArray[22])
testRunner.testCase.setPropertyValue('DurationDays1',singleLineArray[23])
testRunner.testCase.setPropertyValue('ChannelId1',singleLineArray[24])
testRunner.testCase.setPropertyValue('TotalAccommodationCost1',singleLineArray[25])
//
//Second Margin
testRunner.testCase.setPropertyValue('SeqId2',singleLineArray[26])
testRunner.testCase.setPropertyValue('OutboundFlightId2',singleLineArray[27])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation2',singleLineArray[28])
testRunner.testCase.setPropertyValue('InboundFlightId2',singleLineArray[29])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation2',singleLineArray[30])
testRunner.testCase.setPropertyValue('ProviderId2',singleLineArray[31])
testRunner.testCase.setPropertyValue('ProviderHotelId2',singleLineArray[32])
testRunner.testCase.setPropertyValue('HotelStarRating2',singleLineArray[33])
testRunner.testCase.setPropertyValue('RegionId2',singleLineArray[34])
//
////First Room of Second Margin
testRunner.testCase.setPropertyValue('RoomsSeqId2A',singleLineArray[35])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId2A',singleLineArray[36])
testRunner.testCase.setPropertyValue('BoardTypeCode2A',singleLineArray[37])
testRunner.testCase.setPropertyValue('NumAdults2A',singleLineArray[38])
testRunner.testCase.setPropertyValue('NumChildren2A',singleLineArray[39])
////Second Room of Second Margin
testRunner.testCase.setPropertyValue('RoomsSeqId2B',singleLineArray[40])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId2B',singleLineArray[41])
testRunner.testCase.setPropertyValue('BoardTypeCode2B',singleLineArray[42])
testRunner.testCase.setPropertyValue('NumAdults2B',singleLineArray[43])
testRunner.testCase.setPropertyValue('NumChildren2B',singleLineArray[44])
//Other details of Second Margin
testRunner.testCase.setPropertyValue('DepartureDate2',singleLineArray[45])
testRunner.testCase.setPropertyValue('DurationDays2',singleLineArray[46])
testRunner.testCase.setPropertyValue('ChannelId2',singleLineArray[47])
testRunner.testCase.setPropertyValue('TotalAccommodationCost2',singleLineArray[48])
//Only 1 set of these details required for request
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[49])

//Show what we put into request-don't really need this, can check script log instead

//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - Multiples2" id="a26fb496-8499-45ee-bd1b-e5ca12e4f12d"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - Multiples2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId1}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId1}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation1}",
      "InboundFlightId": "${#TestCase#InboundFlightId1}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation1}",
      "ProviderId": "${#TestCase#ProviderId1}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId1}",
      "HotelStarRating": "${#TestCase#HotelStarRating1}",
      "RegionId": "${#TestCase#RegionId1}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId1A}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId1A}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode1A}",
          "NumAdults": "${#TestCase#NumAdults1A}",
          "NumChildren": "${#TestCase#NumChildren1A}"
        },
        {
          "SeqId": "${#TestCase#RoomsSeqId1B}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId1B}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode1B}",
          "NumAdults": "${#TestCase#NumAdults1B}",
          "NumChildren": "${#TestCase#NumChildren1B}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate1}",
      "DurationDays": "${#TestCase#DurationDays1}",
      "ChannelId": "${#TestCase#ChannelId1}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost1}"
    },
    {
      "SeqId": "${#TestCase#SeqId2}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId2}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation2}",
      "InboundFlightId": "${#TestCase#InboundFlightId2}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation2}",
      "ProviderId": 		"${#TestCase#ProviderId2}",
      "ProviderHotelId": 	"${#TestCase#ProviderHotelId2}",
      "HotelStarRating": "${#TestCase#HotelStarRating2}",
      "RegionId": "${#TestCase#RegionId2}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId2A}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId2A}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode2A}",
          "NumAdults": "${#TestCase#NumAdults2A}",
          "NumChildren": "${#TestCase#NumChildren2A}"
        },
        {
          "SeqId": "${#TestCase#RoomsSeqId2}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId2B}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode2B}",
          "NumAdults": "${#TestCase#NumAdults2B}",
          "NumChildren": "${#TestCase#NumChildren2B}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate2}",
      "DurationDays": "${#TestCase#DurationDays2}",
      "ChannelId": "${#TestCase#ChannelId2}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost2}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Multiples2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Multiples2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

log.info "got jsonRequest"
//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests  Multiple Margins and Rooms"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "{Margin_GetMargins - Multiples Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{
log.info "Not null"

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		
	
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"	
	log.info "The location fo the failure folder is: " + logFileFailure
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="74fb75c5-2a1a-4da9-ab4f-659a1392bd88" name="Script Assertion - Check for Reflected Values"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Multiples2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Multiples2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

def RequestId 			= jsonRequest.Id
def RequestVersion 		= jsonRequest.Version
def RequestSeqId		= jsonRequest.Margins[0].SeqId
def RequestRoomsSeqId	= jsonRequest.Margins[0].Rooms[0].SeqId

def ResponseId 		= jsonResponse.Id
def ResponseVersion 	= jsonResponse.Version
def ResponseSeqId		= jsonResponse.Margins[0].SeqId
def ResponseRoomsSeqId	= jsonResponse.Margins[0].Rooms[0].SeqId

assert (ResponseId.toString().equalsIgnoreCase(RequestId))	: "Response and Request ID fields should match (ignoring case) Request= "+RequestId+" Response= "+ResponseId
assert (ResponseVersion.toString() == RequestVersion)		: "Response and Request Version fields should match. Request= "+RequestVersion + " Response= "+ResponseVersion
assert (ResponseSeqId.toString() == RequestSeqId)			: "Response and Request SeqId fields should match. Request= "+RequestSeqId + " Response= "+ResponseSeqId
assert (ResponseRoomsSeqId.toString() == RequestRoomsSeqId)	: "Response and Request RoomsSeqId fields should match. Request= "+RequestRoomsSeqId + " Response= "+ResponseRoomsSeqId
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="6962e815-fb3d-4ca1-ae76-8ec2f762ef26" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="5098a9ac-c2b4-4dfd-bbef-53534746c4c2"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="bb354552-9758-4e19-816f-4d9224626ba5"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property><con:property><con:name>SeqId1</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId1</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation1</con:name><con:value/></con:property><con:property><con:name>InboundFlightId1</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation1</con:name><con:value/></con:property><con:property><con:name>ProviderId1</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId1</con:name><con:value/></con:property><con:property><con:name>HotelStarRating1</con:name><con:value/></con:property><con:property><con:name>RegionId1</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId1</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId1</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode1</con:name><con:value/></con:property><con:property><con:name>NumAdults1</con:name><con:value/></con:property><con:property><con:name>NumChildren1</con:name><con:value/></con:property><con:property><con:name>DepartureDate1</con:name><con:value/></con:property><con:property><con:name>DurationDays1</con:name><con:value/></con:property><con:property><con:name>ChannelId1</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost1</con:name><con:value/></con:property><con:property><con:name>SeqId2</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId2</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation2</con:name><con:value/></con:property><con:property><con:name>InboundFlightId2</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation2</con:name><con:value/></con:property><con:property><con:name>ProviderId2</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId2</con:name><con:value/></con:property><con:property><con:name>HotelStarRating2</con:name><con:value/></con:property><con:property><con:name>RegionId2</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId2</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId2</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode2</con:name><con:value/></con:property><con:property><con:name>NumAdults2</con:name><con:value/></con:property><con:property><con:name>NumChildren2</con:name><con:value/></con:property><con:property><con:name>DepartureDate2</con:name><con:value/></con:property><con:property><con:name>DurationDays2</con:name><con:value/></con:property><con:property><con:name>ChannelId2</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost2</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId1A</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId1A</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode1A</con:name><con:value/></con:property><con:property><con:name>NumAdults1A</con:name><con:value/></con:property><con:property><con:name>NumChildren1A</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId1B</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId1B</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode1B</con:name><con:value/></con:property><con:property><con:name>NumAdults1B</con:name><con:value/></con:property><con:property><con:name>NumChildren1B</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId2A</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId2A</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode2A</con:name><con:value/></con:property><con:property><con:name>NumAdults2A</con:name><con:value/></con:property><con:property><con:name>NumChildren2A</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId2B</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId2B</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode2B</con:name><con:value/></con:property><con:property><con:name>NumAdults2B</con:name><con:value/></con:property><con:property><con:name>NumChildren2B</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="6032c532-721f-4bbc-900d-bd374b61d9cb" name="Margins - Negative Tests - Multiple Margins - Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4b730f75-d8d0-49f5-91f4-587139a4a99b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Multiple 1 Margin, 2 Rooms  Per Margin Diff Boards Test Case" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="baecaedf-5fae-421d-b4b6-cd6b9afe5116"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="23829c9f-4d3d-4161-b602-98fb51b6eae7"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Margins Test File - Multiples 1 Margins 2Rooms Each-Diff Boards.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File - Multiples 1 Margins 2Rooms Each-Diff Boards.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File - Multiples 1 Margins 2Rooms Each-Diff Boards.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="4cb982f5-1b56-407c-a2f5-e4078387f9ca"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 
def singleLineArray =DataTable[currentRow]

//Only 1 set of these details required for request
testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])

//First Margain
testRunner.testCase.setPropertyValue('SeqId1',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId1',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation1',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId1',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation1',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId1',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId1',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating1',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId1',singleLineArray[11])
////First Room of First Margin
testRunner.testCase.setPropertyValue('RoomsSeqId1A',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId1A',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode1A',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults1A',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren1A',singleLineArray[16])
////Second Room of First Margin
testRunner.testCase.setPropertyValue('RoomsSeqId1B',singleLineArray[17])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId1B',singleLineArray[17])
testRunner.testCase.setPropertyValue('BoardTypeCode1B',singleLineArray[19])
testRunner.testCase.setPropertyValue('NumAdults1B',singleLineArray[20])
testRunner.testCase.setPropertyValue('NumChildren1B',singleLineArray[21])
//Other details of First Margin
testRunner.testCase.setPropertyValue('DepartureDate1',singleLineArray[22])
testRunner.testCase.setPropertyValue('DurationDays1',singleLineArray[23])
testRunner.testCase.setPropertyValue('ChannelId1',singleLineArray[24])
testRunner.testCase.setPropertyValue('TotalAccommodationCost1',singleLineArray[25])
//

//Only 1 set of these details required for request
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[26])

//Show what we put into request-don't really need this, can check script log instead

//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - Multiples3" id="4bc0c6b2-3e4d-4907-bac0-3ac854903b66"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - Multiples3" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId1}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId1}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation1}",
      "InboundFlightId": "${#TestCase#InboundFlightId1}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation1}",
      "ProviderId": "${#TestCase#ProviderId1}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId1}",
      "HotelStarRating": "${#TestCase#HotelStarRating1}",
      "RegionId": "${#TestCase#RegionId1}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId1A}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId1A}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode1A}",
          "NumAdults": "${#TestCase#NumAdults1A}",
          "NumChildren": "${#TestCase#NumChildren1A}"
        },
        {
          "SeqId": "${#TestCase#RoomsSeqId1B}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId1B}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode1B}",
          "NumAdults": "${#TestCase#NumAdults1B}",
          "NumChildren": "${#TestCase#NumChildren1B}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate1}",
      "DurationDays": "${#TestCase#DurationDays1}",
      "ChannelId": "${#TestCase#ChannelId1}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost1}"
    },
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - Multiples3#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - Multiples3#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)

log.info "got jsonRequest"
//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests  Multiple Margins and Rooms"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "{Margin_GetMargins - Multiples-Board Type Different Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{
log.info "Not null"

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"	
	log.info "The location fo the failure folder is: " + logFileFailure

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="6fcebab3-a3bf-46a6-9dd0-989fc1e55110" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="6ead3fcb-c439-436f-b2d8-6e4345c2c4fc"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="e2eccf60-9125-46d4-9de8-9aaad5781cd9"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property><con:property><con:name>SeqId1</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId1</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation1</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId1</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation1</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId1</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId1</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating1</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId1</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId1</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId1</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode1</con:name><con:value/></con:property><con:property><con:name>NumAdults1</con:name><con:value/></con:property><con:property><con:name>NumChildren1</con:name><con:value/></con:property><con:property><con:name>DepartureDate1</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays1</con:name><con:value>1</con:value></con:property><con:property><con:name>ChannelId1</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost1</con:name><con:value>100</con:value></con:property><con:property><con:name>SeqId2</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId2</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation2</con:name><con:value/></con:property><con:property><con:name>InboundFlightId2</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation2</con:name><con:value/></con:property><con:property><con:name>ProviderId2</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId2</con:name><con:value/></con:property><con:property><con:name>HotelStarRating2</con:name><con:value/></con:property><con:property><con:name>RegionId2</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId2</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId2</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode2</con:name><con:value/></con:property><con:property><con:name>NumAdults2</con:name><con:value/></con:property><con:property><con:name>NumChildren2</con:name><con:value/></con:property><con:property><con:name>DepartureDate2</con:name><con:value/></con:property><con:property><con:name>DurationDays2</con:name><con:value/></con:property><con:property><con:name>ChannelId2</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost2</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId1A</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId1A</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode1A</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults1A</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren1A</con:name><con:value>0</con:value></con:property><con:property><con:name>RoomsSeqId1B</con:name><con:value>2</con:value></con:property><con:property><con:name>ProviderHotelRoomId1B</con:name><con:value>2</con:value></con:property><con:property><con:name>BoardTypeCode1B</con:name><con:value>AI</con:value></con:property><con:property><con:name>NumAdults1B</con:name><con:value>2</con:value></con:property><con:property><con:name>NumChildren1B</con:name><con:value>3</con:value></con:property><con:property><con:name>RoomsSeqId2A</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId2A</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode2A</con:name><con:value/></con:property><con:property><con:name>NumAdults2A</con:name><con:value/></con:property><con:property><con:name>NumChildren2A</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId2B</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId2B</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode2B</con:name><con:value/></con:property><con:property><con:name>NumAdults2B</con:name><con:value/></con:property><con:property><con:name>NumChildren2B</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="95992860-cf06-4343-8b22-5459a5dd08f7" name="Margins - Negative Tests - TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="079f2c9c-496f-4f9a-9b19-c77da3f6bde3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="d877f69f-533b-4237-a8ba-4e66843270b2"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="4b6ebd11-cada-4306-a1a6-4d28ef6e1c8b"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Margins Test File-Negative1-MissingFields.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Negative1-MissingFields.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Negative1-MissingFields.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="561daa87-5516-41f6-896a-a0639451f8a0"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields1" id="809c8b3e-1d0b-4c63-a16b-7e830850bfd9"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="b7214d1f-e9da-402f-a4f0-64267fe49cb0" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="1b59821c-5c14-46a1-ac4f-0bc307e3a8e9"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="67881d3f-6384-4fcb-af8a-89e629964671"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="7c184f31-3144-487f-9f31-f42f1e96e4bc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="fac980a8-81d5-45e9-80f2-4c2b81559e04"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="edd64c73-9484-4afa-abfb-be6bfeaae92f"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Margins Test File-Negative2-InvalidFields.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Negative2-InvalidFields.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Negative2-InvalidFields.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="86f12e3e-4905-4c91-b90c-c514c18fa9d2"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields1" id="7f5bef83-d965-478b-962f-f52f1beebb8b"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{
log.info "Not null"

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"	
	log.info "The location fo the failure folder is: " + logFileFailure

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="3d5a593b-a2b2-47a4-a9e6-02854b588754" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="db0a418c-d0bd-4354-a59c-9ea154e10732"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="5a68cc65-9424-47be-8198-e37f8e692169"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="f670356e-78da-4335-9ec8-55cce2b04149" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Range Limits Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="c7286811-3905-433d-bccf-ff8050d6e943"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="41fe3f3e-d8c0-4ee2-88dc-ff09f1212fcb"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Margins Test File-Range Limits.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Margins Test File-Range Limits.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File-Range Limits.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="3c32fc8c-1b99-4469-bb76-a03cadd0f783"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
//Repeat with new seqID
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
//
//Repeat with new seqID
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
//
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - RangeLimits1" id="5d4ebec5-f111-4b8c-af15-8fb17526b6bd"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - RangeLimits1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - RangeLimits1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - RangeLimits1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests  RangeLimits"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "{Margin_GetMargins - RangeLimits Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{
log.info "Not null"

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"	
	log.info "The location fo the failure folder is: " + logFileFailure

}
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="19bd88b2-e5d5-4638-824f-4a4669133d2f" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="177f9db5-050e-4379-8836-b30280d8264c"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="916a89ce-a4fd-4f8a-9a94-446ea86a66fb"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="2dd9d502-afa5-41f9-b486-444774176d5a" name="Margins - Negative Tests - High Priority"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="9dae4912-b199-4f16-94e3-b2df9a05a8b6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - OutboundFlightId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="2274e559-a76a-42f2-bbeb-00d39b4d19c9"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="d5c2edff-f43e-4678-b52e-8fdb8bf22338"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-OutboundFlightId.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-OutboundFlightId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-OutboundFlightId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="162f41b7-e64d-47ba-88b4-ef201d6b0b42"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields2" id="101e52fe-d719-49d4-8ee5-6271962a44c3"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields2" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields2#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields2#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-OutboundFlightId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields2 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="45af7f6c-1968-4d32-8685-af5baf409ab7" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="94f50051-b8d2-4dfe-a48e-987540363d09"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="08f468bd-3e30-4d11-b148-32022be2863f"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="d22096c2-a982-4b93-bf2d-9f6a518a0cd8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - InboundFlightId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="cb962334-5a6a-4c82-977b-a3fbf3ed8c84"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="abd6c31a-61e6-466e-b9ad-1b9ca58df4a3"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-InboundFlightId.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-InboundFlightId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-InboundFlightId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="ce15cdb4-43ee-4b75-85c7-cc8abc5fe5e6"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields4" id="949155de-8539-4bab-acdd-e3c919ec603f"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields4" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields4#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields4#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-InboundFlightId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields4 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="437c2d5d-a623-48a4-9e12-ea5698442973" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="ed69519e-6906-416e-ae1b-38db80933df4"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="ea39a01b-5e80-482a-bc98-42f3290b4e55"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="a03cbbd8-3798-4066-a340-6a9e6c7f3f2e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - ProviderId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="2630089d-bf44-4b71-9bb0-c15e4f062593"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="4ca2db35-0686-44f7-a78b-b0392069d455"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-ProviderID.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-ProviderID.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-ProviderID.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="233d37ff-b517-4203-80e9-77c12cc7c1d7"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields6" id="015bdc2c-1d8f-4396-b7f7-29446e516d66"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields6" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields6#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields6#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-~ProviderId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields6 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="4f7f13f5-0123-4971-a6f3-860b97e048cf" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="f4dfd01b-445e-44f1-aa62-10e8e6dd299f"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="544ae899-1c8a-4708-b0ba-badbc53c2ae5"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="4f001918-b160-45f0-a50a-04ca1ff236b9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - ProviderHotelId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="b3d649f1-b2fd-463c-be43-845cd5d85162"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="bdeb2984-e620-4e94-8f2c-1b10bfafaed6"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-ProviderHotelID.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-ProviderHotelID.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-ProviderHotelID.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="3a50a54b-19a9-41ae-927b-06f8f801af10"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields7" id="4fa0a899-6beb-4a77-a91a-e402f23953a6"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields7" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields7#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields7#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-ProviderHotelId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields7 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="fd246186-3b7d-47e2-ae5f-66d55112d59c" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="5ed6ff5c-7f34-40b6-8f35-56dd336a1c6c"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="e01e70f5-ea30-40a5-9ceb-204b88b4025e"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="b1d13e2c-0644-4749-a60c-152562ae416f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - HotelStarRating - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="e484e9dd-32ca-4bf6-b906-5a3f26d65ce5"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="ef452883-37a1-4215-ac1d-8b27931a7776"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-HotelStarRating.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-HotelStarRating.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-HotelStarRating.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="a875a886-4655-4380-bdcc-a25bbc968400"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields8" id="bf77bada-aacb-41b6-a90d-16486a252a1c"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields8" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields8#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields8#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-HotelStarRating"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields8 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="bb906cb3-9124-4ba3-824c-c91b1749a646" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="48fc6a13-9985-4c8a-a93d-061ef2c09e19"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="ba0d2620-68e0-4058-812d-5e0ade9ee3bf"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="0650bfa6-b9e3-477b-bd77-8678375b42d0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - ProviderHotelRoomId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="30d78740-32e6-427d-8c89-996811213fbb"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="0f6af9d6-0241-428b-b5aa-36667ac1018b"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-ProviderHotelRoomID.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-ProviderHotelRoomID.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-ProviderHotelRoomID.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="b3e8e987-7090-470c-bb3f-538e37f0815f"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields10" id="db1bec3a-6e7d-461c-a903-334e10fc0814"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields10" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields10#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields10#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-ProviderHotelRoomId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields10 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="f87d8a8b-5ab1-45b3-829c-77da18852efa" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="4388cbf7-2d18-4d7a-9f99-029ec97a76d8"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="f7174d8c-35f7-4e60-9d8e-2259c9907ab9"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="b7d29a25-998a-47be-8604-739897091e26" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - BoardType - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="35127fcc-059f-4b4c-8e6b-1cbf6d2b9776"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="e3a7b0f8-ddbf-4dc4-81d0-e507563e9f0e"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-BoardType.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-BoardType.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-BoardType.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="82ee5187-b949-44c2-918e-f968de48b677"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields11" id="e69a3133-edf1-4832-ab4c-ddf6624e41c8"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields11" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields11#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields11#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-BoardType"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields11 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="f2e4fed2-b161-444a-ac71-964cafa57399" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="e2b59656-dd70-49fb-bc80-295ed1e72582"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="9d72c8a4-db8c-4b6e-8d8a-0204a589caa3"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>1</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>100</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2017-18-09T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="02954b0c-7e2a-4172-b7d6-0d05466d564d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - Total Accom Cost - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="5a2892f8-0e51-40d3-9764-2d5f29cf0cca"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="65bb24a4-1e8e-4eb9-8af7-864843aa816a"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-Total Accom Cost.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Missing Fields-Total Accom Cost.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-Total Accom Cost.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="e6230973-b237-47f7-825c-8fe2459bf47f"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields16" id="c91f6eac-9d1e-410f-af87-7d208cd36edf"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields16" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields16#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields16#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-Total Accom Cost"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields16 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="f44b3ae4-51bd-48e2-9f26-367cc42064bc" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="a42baa9e-1390-4fc9-9a69-f23167a215ab"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="30f3d897-a8bc-4506-a6bf-f482ff54f291"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="eb3c6fde-2d07-4b29-accd-76e73f605781" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - OutboundFlightId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="84947415-3cec-4875-be6c-5ca968260056"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="b2ec8427-71e4-42d8-8507-1ad41a18b5e0"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-OutboundFlightId.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-OutboundFlightId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-OutboundFlightId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="fe7b1a7f-8c83-4b24-b0d3-316636efcf37"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields19" id="c2ee8410-eea6-4a07-bb30-1fa55a0f0815"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields19" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields19#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields19#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-OutboundFlightId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields19 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="2338cf6b-ccd3-4d9e-a4f0-3f713a466c85" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="41daa664-3009-41fc-a2d3-8a2d6cb97f0a"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="2e0a5b97-33e9-41fc-9325-ff9d79ac09e5"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="00bcb030-de15-4fee-abea-45998f5ea4b8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - InboundFlightId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="41230a87-ecd8-44b8-b889-29ad4bef4b08"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="41754203-1a55-4606-8338-448bd3ba4b10"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-InboundFlightId.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-InboundFlightId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-InboundFlightId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="b782c61e-d270-4fda-8876-25e0991fe697"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields21" id="33ab9f3a-2f66-45f2-a28e-77d0a0078826"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields21" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields21#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields21#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-InboundFlightId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields21 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="66d8fbb0-4492-42f1-80f6-8020f67f5bad" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="c098bb64-5973-4b23-a1bf-c54b1b973e18"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="54b8aad5-b219-4e1d-aa31-9f205f18816b"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="5a5ab7f4-d1fa-4029-a9b9-2373249dbd31" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - ProviderId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="104b6b94-76fb-445f-875f-c131274d0a50"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="70b35c1f-bc26-46ca-a44f-273118070667"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- InvalidFields-ProviderID.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- InvalidFields-ProviderID.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- InvalidFields-ProviderID.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="40b828f2-f57c-4925-8ec4-d12021e8eb41"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields23" id="d5b711c8-5f9f-481d-8cbf-f1a2fbbfecd9"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields23" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields23#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields23#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-~ProviderId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields22 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="eb47c393-a0d7-4afd-9082-07dde84a6033" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="744fa85e-5793-45fa-8fea-a368786247ba"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="0d739c8a-ecaf-40ce-80eb-b5ad60493316"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="d55eee1b-40da-4bb5-ba48-d74c3013889b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - ProviderHotelId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="a237c856-bef8-42f9-b586-46aa10856a68"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="6f4b5634-4356-4296-97bf-eb037426979c"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-ProviderHotelID.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-ProviderHotelID.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-ProviderHotelID.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="76cc685e-bf4e-4a51-b755-f35efbc55d85"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields24" id="f36140b6-c3a9-46de-b8ad-efe7336cfb65"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields24" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields24#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields24#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-ProviderHotelId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields24 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="11585855-a886-44fe-bd52-004fc03e47b1" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="22146436-e724-43c8-9957-19aea83b1d98"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="1ddaaeed-fafa-4ead-92eb-e87499c09324"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="47e3c2f8-93e3-475d-b7ff-88be139b7e17" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - HotelStarRating - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="524a122d-26b9-4b99-aea2-fe4136b47270"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="41a94b7a-fe09-44a8-8748-2fbf953a68f4"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-HotelStarRating.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-HotelStarRating.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-HotelStarRating.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="a4895722-bc04-4ab4-908c-0530ad1ec62a"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields25" id="9b78220a-e4e7-4cdb-9af9-cf736e22f289"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields25" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields25#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields25#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-HotelStarRating"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields25 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="3dab36a0-e590-460f-989c-633438c3f2d4" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="f9298ea9-7178-4aa0-aa12-4eee1c95939f"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="dd6dfd6d-7f3e-4a9e-8ded-01a34ab8381d"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>9</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>1</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>100</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2018-05-01T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="191be109-fd60-4c59-bb8f-89d7b6b884d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - ProviderHotelRoomId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="5385a491-9da5-4f49-833f-db98c8267e1c"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="38459a8d-dbcb-4d20-89e5-82565c07b777"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-ProviderHotelRoomID.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-ProviderHotelRoomID.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-ProviderHotelRoomID.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="c4c3b04a-2fcb-450a-bde2-83d1319fe2fe"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields27" id="b908d1df-d4cd-4dd6-8176-1354e53b8a64"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields27" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields27#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields27#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-ProviderHotelRoomId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields27 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="0bb840e9-f918-4710-89d3-2e9e2e737688" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="390cbb8f-c38d-49d0-826a-be4cea7bc0cf"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="bffc3ce6-da28-4244-bb19-3eecce9ea8e3"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="3fa436b0-2bb8-470e-8b55-5760802af210" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - BoardType - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="d25818ba-c357-40ce-a64a-917ee7c8a71b"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="a32009a7-a667-405b-8b05-f05ecb94ce0a"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-BoardType.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-BoardType.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-BoardType.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="2b130f97-f826-4d97-ac86-39d62085081d"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields28" id="df1d91d6-6b02-4fc0-bce8-b9782c38d60e"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields28" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields28#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields28#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-BoardType"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields28 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="1f88eb9a-b12b-4a3e-9f4c-2f1fa5dc7566" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="39088877-e615-4bf2-b368-8d7658a444fe"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="e1813e38-61f2-4057-834a-e6b7bdf343fc"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>XX</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>1</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>100</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2018-05-01T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="8cbec860-afb8-422c-b855-64e9462f0e3a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Total Accom Cost - Less than zero - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="10e9dadf-83b2-4d56-838b-4e5469132804"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="8102ab71-faac-4d61-b254-d9ce4b5da293"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-Total Accom Cost-Less Than Zero.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-Total Accom Cost-Less Than Zero.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Total Accom Cost-Less Than Zero.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="ab7dac2d-f3de-470d-91b5-69660a7030d3"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields34" id="4bc31929-8e04-488f-a173-c72d38f85ca5"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields16" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields34#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields34#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Total Accom Cost"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields34 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="060beeb8-8ff7-4c70-a2c0-58467bf0d63a" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="e7214de3-01fa-4dce-b39b-93260190bc30"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="2e89a4ca-a8a3-46a5-8e48-382abdd88551"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>1</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>-1</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2018-05-01T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="28470cb1-2bdc-4c0e-aa73-2200bac61d21" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Total Accom Cost - Zero and more - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="6f5d6b39-6008-4d88-b15e-0ef65e9797ef"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="5830af8b-8faf-4e3d-974b-7b8174c9b451"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-Total Accom Cost-Zero and More.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative High Priority/Margins Test File- Invalid Fields-Total Accom Cost-Zero and More.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Total Accom Cost-Zero and More.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="6c57ce9b-3aca-49ac-bf8a-7cb0fdc266d0"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields34A" id="ba508fde-d2da-4c12-85a2-fd62f22972c6"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields34" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields34A#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields34A#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Total Accom Cost - Zero and More"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields34A Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="34257b92-97a7-44e8-8657-4dc56fbb4cc6" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="d4d2e416-0659-455d-a9d4-efe98421b312"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="cf407343-979b-468a-939a-5b52c05c761c"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="b9896def-9bfa-4d9e-bef6-e60cdc3cf0e2" name="Margins - Negative Tests - Medium Priority"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="45dcfd13-74fe-47ab-bc34-3bd4a66cd132" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - OutboundFlightIsAlloc - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="a4809580-d73c-48fd-9e3b-9f754412364b"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="96dcdc1c-2959-4b13-a05f-527a9c039959"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-OutboundFlightIsAlloc.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-OutboundFlightIsAlloc.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-OutboundFlightIsAlloc.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="6b1c46aa-4127-4f2d-bf65-87a5bc5669f5"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields3" id="f39c76a6-9790-4ac9-bd2b-45bcf31e1349"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields3" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields3#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields3#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-OutboundFlightIsAlloc"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields3 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="b86b6b51-d920-4606-84d1-2f48c6a51d66" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="ce46a3cf-c422-4d16-941a-14bb3fff484e"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="c2c7bdc0-b6cb-4d84-b7b2-cd0f67b82c5d"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="da8d5a9a-e764-4c36-abb2-f02038e9608c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - InboundFlightIsAlloc - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="e7f615f8-c5b6-419d-924a-60c2e75ca12c"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="82b4dde8-c00b-4c2a-a59a-360e53bbbde4"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-InboundFlightIsAlloc.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-InboundFlightIsAlloc.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-InboundFlightIsAlloc.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="33d34ba7-e278-42ab-b20e-de92dd000ad4"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields4" id="a273a107-1639-46d8-a87e-9cef9dee1149"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields4" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields4#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields4#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-InboundFlightIsAlloc"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields4 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="bc7bfc51-e84f-4d65-913d-c9b572788f65" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="088b3e84-2b2f-473e-8d25-842c11fac85f"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="8522b1c0-a014-4fae-9638-1dba1154c536"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="1b29eea8-11ff-4ee6-ae37-07183433c30e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - RegionID and RoomsSeqId- Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="7a9546ff-b112-4142-bec2-da5ef83e07c9"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="20bf2b66-6239-4f8d-a580-b3f5c1e3452d"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-RegionId and RoomsSeqId.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-RegionId and RoomsSeqId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-RegionId and RoomsSeqId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="59586e26-3d97-4650-a1b2-2357fd3b71f4"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields9" id="7150a297-c2c1-4163-a828-19b771aa453d"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields9" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields9#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields9#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-RegionID and Rooms SeqID"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields9 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="f18c65c1-454b-4971-9997-143ff07a4701" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="8e40d333-63dc-4598-a79a-9eb6197b45ce"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="1c987e63-134c-4a98-9ce8-218a63733686"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="f8400157-2aa5-41ec-8e2f-c79951686faf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - Num People- Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="ad01c10f-171d-4efb-9f63-be09fc9f51d3"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="e2afc81e-8805-41cb-8fcd-e0d66fbc538f"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-Num People.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-Num People.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-Num People.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="452ccfc3-2ca1-4a27-8085-3d3cba027a01"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields12" id="e99adf64-e1e5-4939-9d79-e4b8f842499e"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields12" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields12#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields12#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-Num People"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields12 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="162ac7f8-3976-4e2b-b4d4-a3bbad5f16b7" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="c0333162-fd24-4a28-8482-41280edffd46"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="8237e101-d2e8-4e26-9f5b-74cafd575986"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="c84df23c-8b6a-40a7-8d96-973b76302f61" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - Duration Days Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="5ae960bb-6ef1-4b83-8141-a21692dab196"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="372da31b-29ac-4a30-bafd-20c33c3da4d1"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-Duration Days.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-Duration Days.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-Duration Days.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="66ed61ea-9b76-4348-84af-6aeed4f48881"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields14" id="7b01640d-b77d-4939-af45-0835687a6b4a"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields14" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields14#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields14#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-Duration Days"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields14 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="8ded2ce5-b1b3-44a9-ab5e-706f63db91a0" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="3bcd65ad-0e6f-4ac6-ba68-9ae49e00ec86"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="0819147d-78d7-4bfe-b2d7-3f75bcef7139"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>100</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2017-18-09T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="39084a40-7fbf-409c-9844-0ea49a20a767" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - Channel Id Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="8c3adea6-e799-47a5-af3f-370078f72cb5"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="4b85aa3b-fce6-443d-a5dc-dd16ae38d4c8"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-Channel ID.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Missing Fields-Channel ID.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-Channel ID.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="880f5ff0-37c6-487f-ba8f-130d460200cf"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields15" id="8e676c65-d6f3-4889-8ec4-ed2426fce161"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields15" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields15#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields15#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-Channel Id"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields14 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="99cf327f-8e31-4bec-a3cd-b217053bc40c" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="f1f9419a-df1e-400f-b449-2b6ec19a0012"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="fae16231-298d-4246-aef9-db548c924aa4"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="8ef278eb-66b2-45c6-9ba4-401488641c4d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - OutboundFlightIsAlloc - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="a599ae9f-1d15-47cc-a4b7-ae77250dac4d"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="2e2682ed-b671-4e5c-b41d-8f0d38e1b16b"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-OutboundFlightIsAlloc.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-OutboundFlightIsAlloc.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-OutboundFlightIsAlloc.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="b0f013dc-b227-4b61-9b11-e6ab37ceeff9"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields20" id="c25a7683-4904-4cf8-a9b4-eb88ef496608"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields20" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields20#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields20#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-OutboundFlightIsAlloc"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields20 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="07f458b9-7e89-4dec-8634-3692cd1128e2" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="67922fd4-e8b4-459d-99b1-f11203ff3d4a"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="28a19e1c-1727-42b3-b5b4-ff93dac14ec8"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="06c3e62d-c080-49a7-8108-80d1838bbdbc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - InboundFlightIsAlloc - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="99c7b703-4a4f-4102-b329-94fae1bf1acb"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="c2279cbe-88b4-4acd-ab00-5acd90bd10d3"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-InboundFlightIsAlloc.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-InboundFlightIsAlloc.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-InboundFlightIsAlloc.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="397a0d07-9f05-42ba-a3df-2996c6dd9b0a"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields22" id="9eefa1ba-c1a2-40d0-a43d-19ddc2326cd8"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields22" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields22#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields22#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-InboundFlightIsAlloc"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields22 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="974880ae-1c08-4f2f-bb7e-507825834c5e" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="3650aa1f-f131-4c64-995d-52f446736e2e"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="46023bfa-cc21-4a1d-bfb5-c6c8588f2d1c"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="1f58cd28-4b38-4107-8f11-c8b0ba4c8ec0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - RegionID and RoomsSeqId- Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="c214ff0f-582b-41e8-91a9-6039a7e1bf99"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="58209585-45c1-4197-89b1-fc7ca85a0f99"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-RegionId and RoomsSeqId.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-RegionId and RoomsSeqId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-RegionId and RoomsSeqId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="580c8fa4-311c-4afb-9d15-8c5ab090b583"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields26" id="235d567b-3842-4b4f-9873-38bec73e6b26"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields26" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields26#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields26#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-RegionID and Rooms SeqID"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields26 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="bd2b1471-6050-4209-ab63-f99b638b016f" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="15d84fb9-19ad-4437-81ee-e01a4c86ad02"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="1c0fde53-ec56-4b1d-a7af-fabef4db0899"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="f46dd1e1-676e-48df-8167-39aefba7ddd0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Num People- Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="f2bd8932-4059-46a1-aaa2-3fda326bc5c6"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="c172888a-a4ff-41da-ad95-b17382f4ea3a"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-Num People.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-Num People.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Num People.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="bb855581-e7a9-455d-bc01-868039f0f9df"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields29" id="9034c385-54f9-425a-95ea-b2e21ef07198"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields12" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields29#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields29#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Num People"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields29 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="15b2dec8-b3af-4e65-abde-1c946937f99e" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="5002b050-b65f-4e65-b363-0e0c7715c0a0"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="ab52d6b8-3d90-4ec9-a975-d7d0502d1026"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="ce33ad1f-7f35-4bb4-a621-026796ee8fad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Duration Day-Zero and Less Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="e5f9538f-01ee-4d2b-ad4e-49d0e01ce8d8"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="ce88f304-db84-4e5c-b720-cd77c3583c7d"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-Duration Days Zero and Less.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-Duration Days Zero and Less.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Duration Days Zero and Less.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="1e9e682b-6622-4d35-88b0-881a15008b5e"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields31" id="046cae85-2e2b-4a77-a6ca-520dc5106945"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields14" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields31#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields31#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Duration Days-Zero and Less"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields31 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="496db1f4-7a52-4089-b766-44e16f005381" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="fd7b1533-1104-40e4-91cf-e865c31e60c0"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="6b8c33ef-43d5-40db-b166-f96e5852b8ab"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>-1</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>100</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2018-05-01T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="0e2a3c0a-3d1f-410d-b069-ddeb61c378e9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Duration Day-More Than Zero Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="e865435a-19d3-4f46-abca-da4cbba5a8f6"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="4b5ee950-e0ea-42cc-b93e-db703ef69377"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-Duration Days More Than Zero.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-Duration Days More Than Zero.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Duration Days More Than Zero.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="609745c8-4f84-4956-84f6-fb6e3e52c7a9"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields32" id="507ab53e-7bda-4251-be82-0c8b33b4f24b"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields31" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields32#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields32#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Duration Days-More than Zero"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields32 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="e6c88bad-c163-4b98-aeb3-a1cbb6378b19" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="ccfac32f-45c8-471a-af03-aed9547397c8"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="3a161cdb-5271-45d8-97b9-2320a36673ba"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>abc123</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>100</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2018-05-01T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="2e9d1b7f-0ee8-476d-817c-bdfa98d43792" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Channel Id Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="1fc15bef-a339-4b09-8831-e6460b4019ed"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="36c4c97a-8a46-4e5d-aa1d-b65ee27acfdb"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-Channel ID.csv");

log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Medium Priority/Margins Test File- Invalid Fields-Channel ID.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Channel ID.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="82bd83f9-deba-4c8c-a427-62f55ef4b2a4"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields33" id="2d12b679-e0e0-4e01-9807-daf01195ae5e"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields15" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields33#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields33#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Channel Id"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields33 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="94dfa250-8d76-465e-a2ff-eae9d59ce6df" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="fc02ccd6-69e0-457e-9abe-ba66f6568ead"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="7bbd9cc1-4490-4137-ba90-4536d2fef141"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="8e38b66d-4a90-4554-9cd0-96cecd2b46d7" name="Margins - Negative Tests - Low Priority"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d342eb2f-a520-4b7e-9bde-f2d94bc65b6a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - Id Version Debug Mode SeqId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="17f8cb96-5aa6-46e1-a2e5-f63fa6c0a4e9"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="236d5032-0d8e-48d4-914f-0ab82942e285"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Missing Fields-Id Version Debug Mode SeqId.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Missing Fields-Id Version Debug Mode SeqId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-Id Version Debug Mode SeqId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="196ba252-6132-462f-905e-1b3fffcf0101"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields1" id="d97e9e6d-4bb0-49d4-ba9b-70d31cdffe4c"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields1" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields1#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields1#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-Id Version Debug Mode SeqId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields1 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="0f39f0d4-bf80-4e41-ba4b-0824b2a23986" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="b15f95a1-9b04-430a-85d1-35d5ca8f3e78"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="be436ab9-c222-49ca-8610-55478f6951d0"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="43bb812a-cbbb-4010-b9e8-42ae05abbe7f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - Departure Date - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="509dd370-6532-44d0-8649-96ba0e4aa3e3"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="b1cad96a-a1ea-4dd4-9219-e694a4673110"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Missing Fields-Departure Date.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Missing Fields-Departure Date.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-Departure Date.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="5e148593-701d-406d-a4fe-4272e312fa07"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields13" id="bf562787-2bb3-4264-be09-432424dd39de"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields13" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields13#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields13#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-Departure Date"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields13 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="2a55bacf-40ff-4264-a91f-6b6b6c0b9ba4" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="39d467a1-9027-47f8-be65-2af066fc1a5e"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="09bd1ec9-2687-4476-b664-1dd5e1101425"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="157c7b46-21aa-4c55-b136-75cd1d938ac3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Missing Fields - Date Time - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="423bf99a-d3ce-4a7c-9834-9755b33c0754"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="dd143564-ae8c-47af-bd91-d967d4db8cfa"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Missing Fields-Date Time.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Missing Fields-Date Time.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Missing Fields-Date Time.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="36cc82ba-a8d0-4286-bba3-a9840a0b21cc"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - MissingFields17" id="6cbbd994-a2eb-4bf1-b0c3-0f566f9a7ee8"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields17" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - MissingFields17#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - MissingFields17#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Missing Fields-Date Time"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Missing Fields17 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="0f399c18-9c46-4ddd-a852-0811a109105c" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="c91e5eb6-4a53-4482-9acf-6aaf7d69a0df"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="af583a1f-52b8-4ffd-92b9-fb0bd2c941c6"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="372640c3-5c3d-4d89-8601-eb9177030d44" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Id Version Debug Mode SeqId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="4afd3b3f-9875-4ce6-9045-4bad9fae5387"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="f43ff6d1-d149-4bc9-8159-53a937ff4b5a"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Invalid Fields-Id Version Debug Mode SeqId.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Invalid Fields-Id Version Debug Mode SeqId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Id Version Debug Mode SeqId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="97cd903f-c5dc-498b-ac56-2b8cb68fa200"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields18" id="cb2cc7e1-3e54-46a0-89a0-6742ce46676f"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields18" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields18#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields18#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Id Version Debug Mode SeqId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields18 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="17f8ceb9-7357-4863-8c17-7a1ce9b852dc" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="a43877e0-4365-42d7-bbb7-ae851dbb15ec"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="1fc0686c-4697-4207-860d-8bf0d4269979"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="889bb270-e0bb-4510-99d6-98c6f022ee0b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Departure Date - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="38cd56b9-d6d1-4fe0-83c4-29af8a8cfb97"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="efc108db-7257-4619-b302-66604fcb3565"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Invalid Fields-Departure Date.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Invalid Fields-Departure Date.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Departure Date.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="6f76e0f6-304a-484f-8450-d69996ab0088"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields30" id="ef965e7c-6680-4f0f-b6ba-835a0c5466a7"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields13" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields30#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields30#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Departure Date"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields30 Row"+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="c551abb1-9ea9-45de-9adc-30364be45189" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="5ab46e8b-a81f-4219-9111-63daf15b9ce8"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="5ce592bb-77ff-4717-a7f4-ae1fa631ecd3"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="3d0ae2db-24cc-42c5-beb1-924308479054" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Invalid Fields - Date Time - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="50c1effe-3763-43b9-8c1b-cb37cb6319d5"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="c734077f-3c16-4108-a79b-379c2162d80a"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Invalid Fields-Date Time.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Invalid Fields-Date Time.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Invalid Fields-Date Time.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="051d9ebb-44c3-4261-9a3f-55340c9ce833"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - InvalidFields35" id="3cc60e8e-7089-4cc2-8779-6ec79d71ee80"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - MissingFields17" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - InvalidFields35#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - InvalidFields35#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Invalid Fields-Date Time"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Invalid Fields35 Row "+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="c7811fca-f2be-49ad-9d48-65ede5558965" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="58d5c316-382a-45d2-ab30-c2686e66df41"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="cfbf143d-a5b3-46e4-a292-3e80444780ed"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="b69ca635-1e11-4816-89b5-6892965444ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Range Limits - Id - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="23321733-1473-4f9a-b04c-6f12f9990c38"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="539a82e9-b51b-4436-a0ff-748239ade5c6"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Id.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Id.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Range Limits-Id.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="40e663ea-f6c6-45f6-b58d-e44604c1799d"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - RangeLimits36" id="091ed565-2762-45ca-a5a4-e7de9caffb01"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - InvalidFields35" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - RangeLimits36#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - RangeLimits36#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Range Limits-ID"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Range Limits36 Row "+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="ba99cff8-64f1-4a63-a52c-91486349c8ec" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="11ed4956-8b1c-43dc-bdc2-530b6dc7513d"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="25e2417f-456f-4854-8891-1f707c3f9050"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="95e08d7c-7f26-47fd-929d-cc40dd5d308b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Range Limits - Version - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="9356ced4-4e2b-4e70-96ee-f097da7c4981"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="42c0b2c2-5cb8-4abe-97c3-6b6e87f27103"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Version.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Version.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Range Limits-Version.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="68e5f89a-441c-427d-8530-59de6c301cd7"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - RangeLimits37" id="82800402-db57-4d6c-a7a5-8c86c771ed8f"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - RangeLimits36" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - RangeLimits37#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - RangeLimits37#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Range Limits-Version"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Range Limits37 Row "+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="2e7ff687-cc4d-4af0-b5d5-4da485fc4830" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="9a0b55f6-6acd-4714-a812-f9d43c1e0a62"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="5c8a72c7-317a-40fd-820a-d3b7203d4732"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="f99df055-c022-46dd-8f9a-76f2780f80e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Range Limits - SeqId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="c98da6d0-dded-4cc0-85d9-dc874b43151f"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="0de747b8-20ef-42bf-932a-59ab76c43434"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-SeqId.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-SeqId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Range Limits-SeqId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="1cdfce34-ee42-4c20-9bab-5f6ebaa0b9a5"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - RangeLimits38" id="5beeb27e-4801-45e6-8d6b-b17305ca1968"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - RangeLimits37" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - RangeLimits38#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - RangeLimits38#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Range Limits-SeqId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Range Limits38 Row "+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="cbf90fa8-6da3-448d-8147-05d6795f8e67" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="1cec8ea9-0c45-4038-8e0d-f888acb09e13"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="9720e51d-569d-4e6f-87df-f83fa408984f"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="66bb2768-d1ff-401d-a7d4-aeb668116055" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Range Limits - RoomsSeqId - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="53b6b3b9-db05-4b82-b10b-d287d8f0555e"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="47d2a849-ed4e-4b76-bbab-c0c1d610b181"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-RoomsSeqId.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-RoomsSeqId.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Range Limits-RoomsSeqId.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="ac8e8cd2-24d1-4919-9d86-1a9156a4cc4e"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - RangeLimits39" id="c6bcfa40-c2f2-47f3-85c0-6345b40494e8"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - RangeLimits38" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - RangeLimits39#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - RangeLimits39#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Range Limits-RoomsSeqId"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Range Limits39 Row "+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="5dc70a92-aa2a-43d4-a777-8b67164de257" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="8537527b-90e0-4657-b95b-687a2fab936a"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="e8afc4c2-a253-4583-92fa-90f890c8cebd"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="fd041e8f-7528-4df7-8463-8006dc9bf3ca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Range Limits - NumPeople - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="3e702dc1-0cf3-4f28-8d8b-aa5f02992bb2"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="668ccd07-0e79-4772-a252-5a933c94dbb9"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Num People.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Num People.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Range Limits-Num People.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="5bfbe294-1956-4c1f-b6eb-504a2862eb97"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - RangeLimits40" id="d8fd723d-9167-4e2c-858d-c38a57c4640a"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - RangeLimits39" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - RangeLimits40#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - RangeLimits40#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Range Limits-Num People"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Range Limits40 Row "+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="2c5c6234-8c3d-4802-9f87-eecf9ba28f67" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="619a256a-ea30-47a0-9729-b5b922bbc37f"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="ea04886a-2832-4605-aadb-04d5b6d7ad97"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="2d9341c0-d896-422f-a553-ddec4464db19" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Range Limits - Duration Days - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="ca38fe46-3ac1-49e3-85b8-44433e877ea6"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="37d0bf95-04fb-4c9f-973e-99eaebedcaac"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Duration Days.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Duration Days.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Range Limits-Duration Days.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="e185ab76-cca6-40a8-8e2f-6082554d1a1d"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - RangeLimits41" id="33d11cfe-83fc-4744-93b7-8b4dbb53a487"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - RangeLimits40" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - RangeLimits41#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - RangeLimits41#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Range Limits-Duration Days"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Range Limits41 Row "+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="dc17470f-eff6-4ccf-8869-583dab1980ec" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="2c9de399-826d-4dec-9a64-3834c7d3f915"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="c6ba7e45-b9e5-4250-94f2-198b6efb2b63"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value>83545083-8173-4E40-8543-8C74B0223B1C</con:value></con:property><con:property><con:name>Version</con:name><con:value>1</con:value></con:property><con:property><con:name>DebugMode</con:name><con:value>TRUE</con:value></con:property><con:property><con:name>SeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>OutboundFlightId</con:name><con:value>511085</con:value></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>InboundFlightId</con:name><con:value>511216</con:value></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value>FALSE</con:value></con:property><con:property><con:name>ProviderId</con:name><con:value>46</con:value></con:property><con:property><con:name>ProviderHotelId</con:name><con:value>4227</con:value></con:property><con:property><con:name>HotelStarRating</con:name><con:value>2</con:value></con:property><con:property><con:name>RegionId</con:name><con:value>4</con:value></con:property><con:property><con:name>RoomsSeqId</con:name><con:value>1</con:value></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value>0</con:value></con:property><con:property><con:name>BoardTypeCode</con:name><con:value>RO</con:value></con:property><con:property><con:name>NumAdults</con:name><con:value>1</con:value></con:property><con:property><con:name>NumChildren</con:name><con:value>0</con:value></con:property><con:property><con:name>DepartureDate</con:name><con:value>2018-07-07T16:55:00Z</con:value></con:property><con:property><con:name>DurationDays</con:name><con:value>2147843647</con:value></con:property><con:property><con:name>ChannelId</con:name><con:value>1</con:value></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value>100</con:value></con:property><con:property><con:name>DateTime</con:name><con:value>2017-18-09T09:00:00Z</con:value></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="c0cfc92e-7f63-4fb8-9b72-889649ec0ba3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Margins-Range Limits - Channel Id - Test Case1" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Start_ClearAllPropertyValues" id="0188c8b1-e584-4023-94fd-b2b15cc3017f"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:testStep type="groovy" name="ReadData" id="ce348376-7f89-4bfc-96a9-b91a346e97c3"><con:settings/><con:config><script>// define properties required for the script to run. 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath

log.info "DATA FOLDER IS "+dataFolder

//Define an empty array list to load data from datasheet 
def DataTable = [];

def date = new Date()
def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
 
// Read data file using InputStreamReader 
File datafile = new File(dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Channel Id.csv");


log.info "Fileloc: " + dataFolder + "/Memphis Test Data/Negative Low Priority/Margins Test File- Range Limits-Channel Id.csv" 

//We are using the row count to exclude header record
int currentRow= 1; 

if (datafile.getName().equalsIgnoreCase("Margins Test File- Range Limits-Channel Id.csv")) { 
	inputStream = new FileInputStream(datafile) 
	dataReader = new BufferedReader(new InputStreamReader(inputStream)) 
	// Read records line by line
	dataReader.eachLine{ singleLine-> DataTable.add( singleLine.split(",")) 
	} 
}

// Exclude header record 
int totalRecords = (DataTable.size()-1) 
log.info "check table size"
log.info DataTable.size()
context.setProperty( "dataFolder", dataFolder )

// Store the data in soapui test context 
context.setProperty( "DataTable", DataTable ) 
context.setProperty( "TotalRecords", totalRecords ) 
context.setProperty( "currentRow", currentRow )  </script></con:config></con:testStep><con:testStep type="groovy" name="SetProperties" id="f750da85-42b9-41f8-a60a-893259c24403"><con:settings/><con:config><script>def DataTable = context.getProperty("DataTable") // Retrieve the test data from the testData property 
def currentRow = context.getProperty("currentRow") // Track which line of the test input file weâ€™re on 

//// Create output folders and set RootResultFolder property
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
//def dataFolder = groovyUtils.projectPath
//def env = "test"
//def date = new Date()
//def folderTime = date.format("yyyy-MM-dd HH-mm-ss")
//
//
////Setting up locations for logging
////The path before the "\\" needs to already exist. The path after the "\\" will be crated
//RootResultFolder 	= dataFolder + "/Log Data/Success data" 	+ "\\" + env + "_Margin Tests - " + folderTime 
//RootFailureFolder 	= dataFolder + "/Log Data/Failure data"		+ "\\" + env + "_Margin Tests - " + folderTime 
//
//log.info "ROOT RESULT FOLDER = "+RootResultFolder
//log.info "ROOT FAILURE FOLDER = "+RootFailureFolder

//CreateResultFolder = new File(RootResultFolder) //Only need this if we want to write successful results to log
//CreateResultFolder.mkdir()
//CreateFailuresFolder = new File(RootFailureFolder)
//CreateFailuresFolder.mkdir()

//testRunner.testCase.setPropertyValue('RootResultFolder',RootResultFolder)
//testRunner.testCase.setPropertyValue('RootFailureFolder',RootResultFolder)




def singleLineArray =DataTable[currentRow]

testRunner.testCase.setPropertyValue('Id',singleLineArray[0])
testRunner.testCase.setPropertyValue('Version',singleLineArray[1])
testRunner.testCase.setPropertyValue('DebugMode',singleLineArray[2])
testRunner.testCase.setPropertyValue('SeqId',singleLineArray[3])
testRunner.testCase.setPropertyValue('OutboundFlightId',singleLineArray[4])
testRunner.testCase.setPropertyValue('OutboundFlightIsAllocation',singleLineArray[5])
testRunner.testCase.setPropertyValue('InboundFlightId',singleLineArray[6])
testRunner.testCase.setPropertyValue('InboundFlightIsAllocation',singleLineArray[7])
testRunner.testCase.setPropertyValue('ProviderId',singleLineArray[8])
testRunner.testCase.setPropertyValue('ProviderHotelId',singleLineArray[9])
testRunner.testCase.setPropertyValue('HotelStarRating',singleLineArray[10])
testRunner.testCase.setPropertyValue('RegionId',singleLineArray[11])
testRunner.testCase.setPropertyValue('RoomsSeqId',singleLineArray[12])
testRunner.testCase.setPropertyValue('ProviderHotelRoomId',singleLineArray[13])
testRunner.testCase.setPropertyValue('BoardTypeCode',singleLineArray[14])
testRunner.testCase.setPropertyValue('NumAdults',singleLineArray[15])
testRunner.testCase.setPropertyValue('NumChildren',singleLineArray[16])
testRunner.testCase.setPropertyValue('DepartureDate',singleLineArray[17])
testRunner.testCase.setPropertyValue('DurationDays',singleLineArray[18])
testRunner.testCase.setPropertyValue('ChannelId',singleLineArray[19])
testRunner.testCase.setPropertyValue('TotalAccommodationCost',singleLineArray[20])
testRunner.testCase.setPropertyValue('DateTime',singleLineArray[21])

//Show what we put into request-don't really need this, can check script log instead
//log.info "in SetProperties"
//log.info "check property values"
//log.info "ID value is: "			+testRunner.testCase.getPropertyValue('Id')
//log.info "Version value is: "		+testRunner.testCase.getPropertyValue('Version')
//log.info "DebugMode value is: "	+testRunner.testCase.getPropertyValue('DebugMode')
//log.info "Seqid value is: "		+testRunner.testCase.getPropertyValue('SeqId')
//log.info "Board Type value is: "	+testRunner.testCase.getPropertyValue('BoardTypeCode')
//log.info "Duration Days value is:" +testRunner.testCase.getPropertyValue('DurationDays')
//log.info "Star Rating value is:"	+testRunner.testCase.getPropertyValue('HotelStarRating')

//context.setProperty( "RootFailureFolder", RootFailureFolder)
</script></con:config></con:testStep><con:testStep type="restrequest" name="Margin_GetMargins - RangeLimits42" id="bf391bfe-35d0-48f2-b4d4-5c65f8a633dc"><con:settings/><con:config service="Jet2.Memphis.Api" resourcePath="/margins" methodName="Margin_GetMargins" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Margin_GetMargins - RangeLimits38" id="29cf87a6-1f4f-4104-bd7c-c4dcb1e14161" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://10.202.101.172</con:endpoint><con:request>{
  "Id": "${#TestCase#Id}",
  "Version": "${#TestCase#Version}",
  "DebugMode": "${#TestCase#DebugMode}",
  "Margins": [
    {
      "SeqId": "${#TestCase#SeqId}",
      "OutboundFlightId": "${#TestCase#OutboundFlightId}",
      "OutboundFlightIsAllocation": "${#TestCase#OutboundFlightIsAllocation}",
      "InboundFlightId": "${#TestCase#InboundFlightId}",
      "InboundFlightIsAllocation": "${#TestCase#InboundFlightIsAllocation}",
      "ProviderId": "${#TestCase#ProviderId}",
      "ProviderHotelId": "${#TestCase#ProviderHotelId}",
      "HotelStarRating": "${#TestCase#HotelStarRating}",
      "RegionId": "${#TestCase#RegionId}",
      "Rooms": [
        {
          "SeqId": "${#TestCase#RoomsSeqId}",
          "ProviderHotelRoomId": "${#TestCase#ProviderHotelRoomId}",
          "BoardTypeCode": "${#TestCase#BoardTypeCode}",
          "NumAdults": "${#TestCase#NumAdults}",
          "NumChildren": "${#TestCase#NumChildren}"
        }
      ],
      "DepartureDate": "${#TestCase#DepartureDate}",
      "DurationDays": "${#TestCase#DurationDays}",
      "ChannelId": "${#TestCase#ChannelId}",
      "TotalAccommodationCost": "${#TestCase#TotalAccommodationCost}"
    }
  ],
  "DateTime": "${#TestCase#DateTime}"
}</con:request><con:originalUri>http://10.202.101.171/margins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25762722-5b11-4e44-a5a4-aee8d5bf106a" name="Valid HTTP Status Codes - Check for 200 code"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8dc4316e-a1f4-4998-b231-f9ab56b0f7df" name="Script Assertion - Check Total Margin >0"><con:configuration><scriptText>//This section gets the contents of the request &amp; response  and puts into variables json Request &amp; jsonResponse 
log.info "IN THE SCRIPT ASSERTION"

import groovy.json.JsonSlurper 
def slurper = new JsonSlurper() //This is an object that parses the request &amp; response to make it easier to access the elements
def request  = context.expand( '${Margin_GetMargins - RangeLimits42#Request}' ).toString() //Gets the content of request for the specified Test Step
def response = context.expand( '${Margin_GetMargins - RangeLimits42#Response}' ).toString()//Gets the content of response for the specified Test Step
def endpoint = messageExchange.getEndpoint() //Gets details of endpont, for outputting in logfile
def currentRow = context.getProperty("currentRow")//Gets the current row. Use this in file name for creating a unique file for each row

def jsonRequest  = slurper.parseText(request) 
def jsonResponse  = slurper.parseText(response)


//Set up variables used in naming logging folder 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def dataFolder = groovyUtils.projectPath //This is the folder where the project resides
def env = "test"
def folderDate = new Date() //Needed to set the time in next line
def folderTime = folderDate.format("yyyy-MM-dd HH-mm-ss")

//Setting up locations for logging
//The path before the "\\" needs to already exist. The path after the "\\" will be crated
	
FailureFolderPath 	= dataFolder + "/Failure Data" 	+ "\\" + env + "_Margin Tests Range Limits-Channel Id"  //PATH OF FOLDER TO CREATE

//Set up variables used in naming logging file
def date = new Date().format("yyyy-MM-dd'T'") 
def time = new Date().format("HH-mm-ss")
def fileName = "Margin_GetMargins - Range Limits42 Row "+currentRow+ " " +date + time + ".txt"  //NAME OF FILE TO CREATE
def FailureFilePath = FailureFolderPath +"/"+ fileName //THIS CREATES THE PATH AND FILENAME FOR FILE TO WRITE TO	
def logFileFailure = new File(FailureFilePath) //This is the actual file the data is logged to



if (jsonResponse.Margins[0]!=null)
{

	//get value of fields in response
	//jsonResponse.Margins.TotalMargin  is being passed as [131], since Margins is an array and TotalMargin is an property(?) within the first array element
	def totalMarginRes = jsonResponse.Margins[0].TotalMargin
	
	
	// Now create and record the result file
	//if (xml.'**'.any { it.name() == 'Error' }) -- This invokes logging on error - use for negative tests -- either need to create an xml slurper called xml, or try to do this withe jsonSlurper
	//if ( totalMarginRes >= 0 ) //This is the condition for writing to log file
	if  (totalMarginRes &lt;= 0) 
	{
		CreateFailuresFolder = new File(FailureFolderPath)
		CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE
	
		
		//Create the data to be writen to the file
		def testResult = new StringBuffer()
		testResult.append "Test run on DateTime Stamp: " +date+ " " + time
		testResult.append "\r\nTotal Margin= "	+totalMarginRes
		testResult.append"\r\nRow Number= "	+currentRow	
		testResult.append "\r\nENDPOINT: " +endpoint  
		testResult.append "\r\nSERVICE REQUEST:\n\n"
		testResult.append(jsonRequest.toString())
		testResult.append "\r\nSERVICE RESPONSE:\n\n"
		testResult.append(jsonResponse.toString())
		
		logFileFailure.write(testResult.toString()) 
		log.info "totalMarginRes &lt;= 0"
		log.info "The location of the failure folder is: " + logFileFailure
	}
	else
	{
		log.info "no error found"
	}
	//END IF	
}
else
{
		
	CreateFailuresFolder = new File(FailureFolderPath)
	CreateFailuresFolder.mkdir()//CREATES THE DIRECTORY WITH NAME CREATED ABOVE

	//Create the data to be writen to the file
	def testResult = new StringBuffer()
	testResult.append "Test run on DateTime Stamp: " +date+ " " + time
	
	testResult.append"\r\nRow Number= "	+currentRow	
	testResult.append "\r\nENDPOINT: " +endpoint  
	testResult.append "\r\nSERVICE REQUEST:\n\n"
	testResult.append(jsonRequest.toString())
	testResult.append "\r\nSERVICE RESPONSE:\n\n"
	testResult.append(jsonResponse.toString())
	
	logFileFailure.write(testResult.toString()) 
	log.info "margin is null"
	log.info "The location fo the failure folder is: " + logFileFailure

}







</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Print to log file" id="c8305578-3069-44cb-ba02-cf5fcb7bfad8" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonOutput
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def RootResultFolder = context.getProperty("RootResultFolder")
def DataTable = context.getProperty("DataTable") 
def currentRow = context.getProperty("currentRow")
//Where doe I get testCount from? Can I substitue totalRecords? 
testCount = context.getProperty( "testCount" ) 
//Get Response
updateResponse = context.getProperty("updateResponse")
validateResponse = context.getProperty("validateResponse")
getResponse = testRunner.testCase.getTestStepByName("Margin_GetMargins - Request 1").getProperty("Response").getValue()

//Get Request
Id = DataTable[currentRow][0]
Version = DataTable[currentRow][1]
DebugMode = DataTable[currentRow][2]
SeqId = DataTable[currentRow][3]
OutboundFlightId = DataTable[currentRow][4]
//etc.

//What is this? Should I get values from data file or the properties? Is this from the response? If so, should it not say something like testRunner.testCase.response.getPropertyValue('Quota')
//quota = testRunner.testCase.getPropertyValue('Quota')
//quantity = testRunner.testCase.getPropertyValue('Quantity')


def time = new Date().format("HH-mm-ss")
def jsonFormat(response) {
    def format = response.toString()
    def prettyOutput = JsonOutput.prettyPrint(format)
    return prettyOutput
}
// checks if a current log file exists if not then prints to logfile

//Where should this path be set and what should it be set to?
def outputFile(path) {
    
    def logFile = new File(path)
    
    if(logFile.exists())
    {
     log.info("Error a file named " + fileName + "already exisits") // Should this not refer to logFile rather than fileName?
    }
    else
    {
     if(testCount == 0) {	   
         logFile.write "REQUEST:" + "\n\n" + 
                "ID: " + Id + "\n" +
                "Version: " + Version + "\n" +
                "Debug Mode: " + DebugMode + "\n" +
                "SeqId: " + seqId + "\n" +
                "OutboundFlighId: " + OutboundFlightId + "\n" + //etc.
                "\n\n" + 
                "Get Response: " + "\n\n" + jsonFormat(getResponse)
                 
     } else if(testCount != 0) {
        
         logFile.write "REQUEST:" + "\n\n" + 
             	"ID: " + Id + "\n" +
              	"Version: " + Version + "\n" +
              	"Debug Mode: " + DebugMode + "\n" +
              	"SeqId: " + SeqId + "\n" +
              	"OutboundFlightId: " + OutboundFlightId + "\n" + //etc.
               "\n\n" + 
               "Get Response: " + "\n\n" + jsonFormat(getResponse) + "\n\n" +
               "Update Response: " + "\n\n" + jsonFormat(updateResponse) + "\n\n" +
               "Validate Response: " + "\n\n" + jsonFormat(validateResponse)
                     
     }
    }
    
}
def fileName 		= 	RootResultFolder + "/" + currentRow + "ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"
//					RootResultFolder
def firstRunOfGet 	= RootResultFolder + "/" + currentRow + "_Initial Get Method Run_Flight ID_" 	+ 	"ID" + Id  + "OutboundFlight" + OutboundFlightId  + "_" + time + ".txt"

if(testCount == 0) {
    outputFile(firstRunOfGet)Margin_GetMargins - Request 1
} else {
    outputFile(fileName)
}
if(testCount == 0) {
    log.error "In the if statement when testcount = 0" 
    testCount++
    context.setProperty( "testCount", testCount )
    testRunner.gotoStepByName("SetDataForUpdate") 
}
</script></con:config></con:testStep><con:testStep type="groovy" name="ConcludeTest" id="aa9deb5f-46c1-4387-9829-8b93780378c2"><con:settings/><con:config><script>int currentRow = context.getProperty("currentRow")
int totalRecords = context.getProperty("TotalRecords")

 
log.info "CurrentRow: " + currentRow + " TotalRecords: " + totalRecords 
if(currentRow &lt;totalRecords){ 
	currentRow=currentRow+1 
	context.setProperty("currentRow", currentRow) 
	testRunner.gotoStepByName("SetProperties") 
	log.info" loop back for data row " + currentRow
	
	} 
	else 
	{ 
	log.info "Completed" 
	}</script></con:config></con:testStep><con:testStep type="groovy" name="END_ClearAllPropertyValues" id="db3c6fe5-6204-4a7d-ad85-9aa6b07e099a"><con:settings/><con:config><script>context.testCase.properties.each {
	context.testCase.properties[it.key].value = ''
}
context.testCase.testSuite.properties.each {
	context.testCase.testSuite.properties[it.key].value = ''
}

testRunner.testCase.properties.each 
{
	if (it.value.name.startsWith("Output_")) 
	{
		testRunner.testCase.setPropertyValue(it.value.name, "")
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>Id</con:name><con:value/></con:property><con:property><con:name>Version</con:name><con:value/></con:property><con:property><con:name>DebugMode</con:name><con:value/></con:property><con:property><con:name>SeqId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightId</con:name><con:value/></con:property><con:property><con:name>OutboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>InboundFlightId</con:name><con:value/></con:property><con:property><con:name>InboundFlightIsAllocation</con:name><con:value/></con:property><con:property><con:name>ProviderId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelId</con:name><con:value/></con:property><con:property><con:name>HotelStarRating</con:name><con:value/></con:property><con:property><con:name>RegionId</con:name><con:value/></con:property><con:property><con:name>RoomsSeqId</con:name><con:value/></con:property><con:property><con:name>ProviderHotelRoomId</con:name><con:value/></con:property><con:property><con:name>BoardTypeCode</con:name><con:value/></con:property><con:property><con:name>NumAdults</con:name><con:value/></con:property><con:property><con:name>NumChildren</con:name><con:value/></con:property><con:property><con:name>DepartureDate</con:name><con:value/></con:property><con:property><con:name>DurationDays</con:name><con:value/></con:property><con:property><con:name>ChannelId</con:name><con:value/></con:property><con:property><con:name>TotalAccommodationCost</con:name><con:value/></con:property><con:property><con:name>DateTime</con:name><con:value/></con:property><con:property><con:name>RootResultFolder</con:name><con:value/></con:property><con:property><con:name>RootFailureFolder</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>